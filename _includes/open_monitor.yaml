openapi: 3.0.1
info:
  title: Swagger Service Monitoring
  description: This is the specification for Cisco Webex Service Monitoring API
  termsOfService: http://wms.webex.com
  contact:
    email: calviny@cisco.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://api-wms.webex.com/v1/
tags:
- name: plugin
  description: Everything about your plugins
  externalDocs:
    description: Find out more
    url: http://pipelineurl
- name: test
  description: Access to Petstore orders
- name: metrics
  description: Operations about checks
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /plugin:
    get:
      tags:
        - plugin
      summary: List plugins by developer name
      description: List plugins
      parameters:
        - name: developer
          description: Plugin developer name
          in: query
          required: false
          schema:
            type: string
        - name: name
          description: Plugin name
          in: query
          required: false
          schema:
            type: string
        - name: status
          description: Plugin status
          in: query
          required: false
          schema:
            type: string
            enum:
            - available
            - pending
            - offline
      responses:
        200:
          description: Return plugin status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
        400:
          description: Invalid input supplied
          content: {}

    put:
      tags:
        - plugin
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plugin'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
    post:
      tags:
        - plugin
      summary: Add a new plugin to the store
      operationId: addPlugin
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plugin'
          application/xml:
            schema:
              $ref: '#/components/schemas/Plugin'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
  /plugin/findByStatus:
    get:
      tags:
      - plugin
      summary: Finds Plugins by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: active
            enum:
            - active
            - pending
            - offline
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plugin'
        400:
          description: Invalid status value
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets

  /plugin/{pluginId}:
    get:
      tags:
      - plugin
      summary: Find Plugin by ID
      description: Returns a single plugin
      operationId: getPetById
      parameters:
      - name: pluginId
        in: path
        description: ID of plugin to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plugin'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - plugin
      summary: Updates a Plugin in the store with form data
      operationId: updatePetWithForm
      parameters:
      - name: pluginId
        in: path
        description: ID of plugin to return
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: order placed for purchasing the pet
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Plugin'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      x-codegen-request-body-name: body
    delete:
      tags:
      - plugin
      summary: Deletes a pet
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: pluginId
        in: path
        description: Pet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /test:
    get:
      tags:
        - test
      summary: List test status
      description: Get test status by component
      operationId: findTestByHostname
      parameters:
        - name: hostName
          required: true
          description: e.g. mtsj1mul001.webex.com
          in: query
          schema:
            type: string
        - name: ipAddress
          required: false
          description: e.g. 10.240.23.33
          in: query
          schema:
            type: string
        - name: poolName
          required: false
          description: e.g. aa
          in: query
          schema:
            type: string
        - name: testType
          in: query
          required: false
          schema:
            type: string
            enum:
            - url
            - port
            - ping
      responses:
        200:
          description: Test objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestResponse'
        400:
          description: Invalid hostName supplied
          content: {}
        404:
          description: Pet not found
          content: {}
    post:
      tags:
        - test
      summary: Create and update test by JSON
      operationId: creatTestByJson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Test'
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
    delete:
      tags:
        - test
      summary: Remove the test from monitoring
      operationId: removeCheckById
      parameters:
        - name: testId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: decommission successfully
          content:
            application/json:
              schema:
                type: string
  /test/{command}:
    post:
      tags:
        - test
      summary: Execute manualtest, maintain, offline servers by command
      parameters:
        - name: command
          required: true
          in: path
          schema:
            type: string
            enum:
            - manualtest
            - maintain
            - offline
            - decommission
        - name: componentName
          required: true
          in: query
          schema:
            type: string
            example:
              e.g. mtsj1mul001.webex.com
        - name: componentType
          required: false
          in: query
          schema:
            type: string
            enum:
            - dc
            - cluster
            - pool
            - server
      responses:
        200:
          description: Return operation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
  /test/location:
    get:
      tags:
        - test
      summary: Get location list
      operationId: getLocation
      parameters:
        - name: theater
          required: false
          in: query
          schema:
            type: string
      responses:
        200:
          description: Theater list including data center
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
  /test/type:
    get:
      tags:
        - test
      summary: List test types
      operationId: getTestTypes
      parameters:
        - name: osType
          required: false
          in: query
          schema:
            type: string
            enum:
            - CentOS_7
            - Windows_2016
      responses:
        200:
          description: Test types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestType'
  /test/schedule/{scheduleId}:
    get:
      tags:
      - test
      summary: Get schedule by schedule ID
      description: Get schedule by schedule ID
      operationId: getScheduleById
      parameters:
      - name: scheduleId
        in: path
        description: ID of test that needs to be fetched
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    delete:
      tags:
      - test
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: scheduleId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Test not found
          content: {}
  /test/template/{templateId}:
    get:
      tags:
      - test
      summary: Get template by template ID
      operationId: getTemplateById
      parameters:
        - name: templateId
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: Template object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestTemplate'
  /check:
    get:
      tags:
      - metrics
      summary: List checks by hostName or ipAddress or checkId
      description: List checks by hostName or ipAddress or checkId
      parameters:
      - name: id
        in: query
        required: false
        description: ID of check
        schema:
          type: string
          default: e.g. Y2lzY29zcGFyazovL3VzL09SR0FOSVpBVElPTi8xZWI2NWZkZi05NjQzLTQxN2YtOTk3NC1hZDcyY2FlMGUxMGY
      - name: hostName
        in: query
        required: false
        description: host name of check
        schema:
          type: string
          default: e.g. mtsj1mul001.webex.com
      - name: ipAddress
        in: query
        required: false
        schema:
          type: string
          default: e.g. 10.252.32.67
      responses:
        default:
          description: successful operation
          content: {}
    post:
      tags:
      - metrics
      summary: Create checks for servers
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        required: true
        description: JSON objects of server list
        content:
          application/json:
            schema:
              type: string
              default: e.g. ['mtsj1mul001.webex.com', 'mtsj1mul002.webex.com']
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /graph/template:
    get:
      tags:
      - metrics
      summary: List tempalte by ID or server
      parameters:
      - name: id
        description: Template ID
        in: query
        required: false
        schema:
          type: string
          default: e.g. Y2lzY29zcGFyazovL3VzL09SR0FOSVpBVElPTi8xZWI2NWZkZi05NjQzLTQxN2YtOTk3NC1hZDcyY2FlMGUxMGY
      - name: hostName
        description: Host name for query
        in: query
        required: false
        schema:
          type: string
          default: e.g. mtsj1mul001.webex.com
      responses:
        default:
          description: successful operation
          content: {}
  /graph:
    get:
      tags:
      - metrics
      description: List graphs by server list
      summary: List graphs by server list
      parameters:
      - name: id
        in: query
        required: false
        description: ID of template
        schema:
          type: string
      - name: templateName
        in: query
        required: false
        description: Name of template
        schema:
          type: string
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Check not found
          content: {}
  /dashboard:
      post:
        tags:
        - metrics
        summary: Created worksheet in Circonus, and dashboard in OMP
        description: Created worksheet in Circonus, and dashboard in OMP
        requestBody:
          required: true
          description: JSON objects of server list
          content:
            application/json:
              schema:
                type: string
                default: e.g. ['mtsj1mul001.webex.com', 'mtsj1mul002.webex.com']
        responses:
          default:
            description: successful operation
            content: {}
        x-codegen-request-body-name: body

  /rule:
      get:
        tags:
        - metrics
        parameters:
        - name: hostName
          in: query
          schema:
            type: string
        responses:
          default:
            description: successful operation
            content: {}
      post:
        tags:
        - metrics
        parameters:
        - name: ruleName
          in: query
          schema:
            type: string
        responses:
          default:
            description: successful operation
            content: {}
  /rule/template:
    get:
      tags:
      - metrics
      summary: List tempalte by ID or server
      parameters:
      - name: id
        description: Template ID
        in: query
        required: false
        schema:
          type: string
          default: e.g. Y2lzY29zcGFyazovL3VzL09SR0FOSVpBVElPTi8xZWI2NWZkZi05NjQzLTQxN2YtOTk3NC1hZDcyY2FlMGUxMGY
      - name: hostName
        description: Host name for query
        in: query
        required: false
        schema:
          type: string
          default: e.g. mtsj1mul001.webex.com
      responses:
        default:
          description: successful operation
          content: {}
  /check/{checkId}:
        delete:
          tags:
          - metrics
          parameters:
          - name: checkId
            description: Remove check by checkid
            in: path
            required: true
            schema:
              type: string
              default: e.g. Y2lzY29zcGFyazovL3VzL09SR0FOSVpBVElPTi8xZWI2NWZkZi05NjQzLTQxN2YtOTk3NC1hZDcyY2FlMGUxMGY
          responses:
            default:
                description: successful operation
                content: {}
components:
  schemas:
    Test:
      type: object
      properties:
        id:
          type: integer
          format: int64
        targetHost:
          type: string
          description: Target host for testing
          example: mtsj1mul001.webex.com
        location:
          type: array
          description: Location to initiate the testing. Default to be SJC
          items:
            $ref: '#/components/schemas/Location'
        schedule:
          type: array
          description: Schedule Name
          items:
            type: array
            items:
              $ref: '#/components/schemas/Schedule'
        testType:
          type: array
          description: Test Type
          items:
            $ref: '#/components/schemas/TestType'
        supportGroup:
          type: string
        status:
          type: string
          description: Test Status
          enum:
          - active
          - maintained
          - offline
          - inactive
    TestTemplate:
      type: object
      properties:
        id:
          type: string
        url:
          type: array
          items:
            type: string
    Location:
      type: object
      properties:
        id:
          type: integer
          format: int64
        theater:
          type: string
          enum:
          - APJC
          - NORAM
          - EMEA
        dataCenter:
          type: string
          enum:
          - SJC01
          - SJC02
          - DFW01
    TestType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        svrType:
          type: string
        requiredParams:
          type: array
          items:
            type: string
    Schedule:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        interval:
          type: integer
          format: int64
        dayOfWeek:
          type: string
          enum:
          - MON
          - TUE
          - WED
          - THU
          - FRI
          - SAT
          - SUN
        timeslot:
          type: string
        timezone:
          type: string
          enum:
          - (GMT +8)
        status:
          type: string
          enum:
          - active
          - inactive
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Check:
      type: object
      properties:
        hostname:
          type: string
        ipaddress:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Plugin:
      required:
      - category
      - codeType
      - developer
      - entryPoint
      - name
      - osType
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: WebexExeDownload
        developer:
          type: array
          items:
            type: string
        zipUrl:
          type: array
          items:
            type: string
        environment:
          type: string
          enum:
          - OCP
          - VMWare
          - Physical
        osType:
          type: string
          enum:
          - CentOS_7
          - Windows_2016
        codeType:
          type: string
          enum:
          - binary
          - jar
          - bash/shell
        entryPoint:
          type: string
          example: bin/WebexExeDownload.exe
        parameters:
          type: string
          example: -S:#seq# -C:#confid# -U:#username# -P:#password# -T:#timeout#
        expectedResult:
          type: string
        negativeResult:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - offline
      xml:
        name: Plugin
    TestResponse:
      type: object
      properties:
        requestId:
          type: string
        errorCode:
          type: string
          example:
            e.g. OKOKOK
        errorMessage:
          type: string
        status:
          type: string
          example:
            Success
        localIp:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header